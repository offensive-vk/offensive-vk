name: ⚠️ Report Workflow Failures

on:
  workflow_run:
    workflows:
      - '🛫 Auto Update Dependencies'
      - '⛽ Automated Repo Statistics'
      - '⚒️ Automated Image Testing'
      - '🤖 Automated Issue - Hamster 🐹'
      - '🏷️ Automated Label - Hamster 🐹'
      - '🤖 Automated Pull Request - Hamster 🐹'
      - '🗃️ Automated Project - Hamster 🐹'
      - '⛅ Docker - Build Image'
      - '🦅 Gitlab - Mirror Sync'
      - '🐍 Generate Snake Contribution GIF'
      - '⭐ Generate Starred Repo List'
      - '🌨️ Publish Multi Platform Docker Images'
    types: [completed]
  workflow_dispatch:

jobs:
  monitor-workflows:
    name: Monitor Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Failed or Skipped Jobs
        id: get-failed-jobs
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.payload.workflow_run.id;
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
            });

            const failedJobs = jobs.jobs
              .filter(job => ['failure', 'skipped'].includes(job.conclusion))
              .map(job => job.name);

            if (failedJobs.length > 0) {
              core.setOutput('failed_jobs', failedJobs.join(', '));
            } else {
              core.setOutput('failed_jobs', '');
            }

      - name: Create Issue if Jobs Failed or Skipped
        if: ${{ steps.get-failed-jobs.outputs.failed_jobs != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const token = process.env.BOT_TOKEN;
            const octokit = github.getOctokit(token);

            const run = context.payload.workflow_run;
            const issueTitle = `Workflow Failure or Skipped Jobs: ${run.name}`;
            const issueBody = `
              > [!CAUTION]  
              > The workflow **${run.name}** (ID: ${run.id}) failed or had skipped jobs.  
              >
              > **Failed or Skipped Jobs:**  
              > ${steps.get-failed-jobs.outputs.failed_jobs}  
              >
              > **Failure Details:**  
              Conclusion: ${run.conclusion}  
              Status Message: ${run.status_message || 'N/A'}  
            `;

            await octokit.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['automated', 'bot', 'hamster', 'issue'],
            });
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
