name: üîí Check Modified Files

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check-sensitive-files:
    name: Check Sensitive Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Commit Info
        id: get-commit-info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });

            const committer = commit.committer.login || commit.commit.committer.name;
            const author = commit.commit.author.name;

            return { committer, author };

      - name: Check Modified Files in Specific Directories
        id: check-modified-files
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const pr = context.payload.pull_request;

            const { data: files } = await github.rest.pulls.listFiles({
              owner: owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });

            const { committer, author } = await steps.get-commit-info.outputs;

            // Check if all files meet the conditions
            const allFilesAreAuthorized = files.every(file =>
              !file.filename.startsWith('.github/') &&
              !file.filename.startsWith('.devcontainer/') &&
              !file.filename.startsWith('.github/workflows/') &&
              !file.filename.endsWith('.yml') &&
              !file.filename.endsWith('.yaml') &&
              file.filename !== 'Dockerfile'
            );

            const isDependabot = (user) => user === 'dependabot[bot]';
            const isRepoOwner = (user) => user === owner;

            let shouldFail = !allFilesAreAuthorized &&
              !(isDependabot(committer) && isDependabot(author)) &&
              !(isRepoOwner(committer) && isRepoOwner(author)) &&
              !(isRepoOwner(committer) && author !== owner) &&
              !(isRepoOwner(author) && committer !== owner);

            if (shouldFail) {
              const warningMessage = `‚ö†Ô∏è @${committer}, your attempt to modify sensitive files was **unauthorized**!  
              Only the repo owner or dependabot can modify the following directories:  
              - \`.github/*\`  
              - \`.devcontainer/*\`  
              - \`.github/workflows/*\``;

              await github.rest.issues.createComment({
                owner: owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: warningMessage,
              });

              throw new Error('Unauthorized modification detected.');
            } else {
              const successMessage = `‚úÖ **Authorization Succeeded!**  
              **Committer**: ${committer}  
              **Author**: ${author}`;

              await github.rest.issues.createComment({
                owner: owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: successMessage,
              });
            }

            return { shouldFail };

      - name: Fail if Un auth Changes Detected
        if: ${{ steps.check-modified-files.outputs.shouldFail == 'true' }}
        run: |
          echo "Unauthorized changes detected."
          exit 1