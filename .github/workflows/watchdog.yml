name: üîí Check Modified Files

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check-sensitive-files:
    name: Check Sensitive Files
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Retrieve committer and author information
      - name: Get Commit Info
        id: get-commit-info
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });

            const committer = commit.committer?.login || commit.commit.committer.name || 'unknown';
            const author = commit.commit.author.name || 'unknown';

            core.setOutput('committer', committer);
            core.setOutput('author', author);

      # Step 3: List and check modified files
      - name: Check Modified Files in Specific Directories
        id: check-modified-files
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const pr = context.payload.pull_request;

            // Get the list of files modified in the PR
            const { data: files } = await github.rest.pulls.listFiles({
              owner: owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });

            const committer = core.getInput('committer');
            const author = core.getInput('author');

            // Define sensitive paths and files
            const sensitivePaths = ['.github/', '.devcontainer/', '.github/workflows/'];
            const sensitiveExtensions = ['.yml', '.yaml'];
            const restrictedFiles = ['Dockerfile'];

            // Check if any modified file is sensitive
            const allFilesAreAuthorized = files.every(file =>
              !sensitivePaths.some(path => file.filename.startsWith(path)) &&
              !sensitiveExtensions.some(ext => file.filename.endsWith(ext)) &&
              !restrictedFiles.includes(file.filename)
            );

            // Define authorized users
            const isDependabot = (user) => user === 'dependabot[bot]';
            const isRepoOwner = (user) => user === owner;

            // Determine if the changes should cause failure
            let shouldFail = !allFilesAreAuthorized &&
              !(isDependabot(committer) || isDependabot(author)) ||
              !(isRepoOwner(committer) || isRepoOwner(author)) ||
              !(isRepoOwner(committer) || author !== owner) ||
              !(isRepoOwner(author) || committer !== owner);

            // Post comments based on authorization status
            if (shouldFail) {
              const warningMessage = `‚ö†Ô∏è @${committer}, your attempt to modify sensitive files was **unauthorized**!  
              Only the repo owner or dependabot can modify the following directories:  
              - \`.github/*\`  
              - \`.devcontainer/*\`  
              - \`.github/workflows/*\``;

              await github.rest.issues.createComment({
                owner: owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: warningMessage,
              });

              core.setOutput('shouldFail', 'true');
            } else {
              const successMessage = `‚úÖ **Authorization Succeeded!**  
              **Committer**: ${committer}  
              **Author**: ${author}`;

              await github.rest.issues.createComment({
                owner: owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: successMessage,
              });

              core.setOutput('shouldFail', 'false');
            }

      # Step 4: Fail if unauthorized changes are detected
      - name: Fail if Unauthorized Changes Detected
        if: ${{ steps.check-modified-files.outputs.shouldFail == 'true' }}
        run: |
          echo "Unauthorized changes detected."
          exit 1
